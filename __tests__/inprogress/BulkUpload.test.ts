// // test number as name upload
// // Generated by qodo Gen

// import POST_BOOKS from "@/app/api/upload/POST";
// import { emptyBook, testBook } from "@/data/values";
// import { MockContext, Context, createMockContext } from '../../prismaContext'
// import { prismaMock } from '../../singleton'
// import { Book } from "@/types/types";
// let mockCtx: MockContext
// let ctx: Context

// beforeEach(() => {
//   mockCtx = createMockContext()
//   ctx = mockCtx as unknown as Context
// })

// describe('POST_BOOKS', () => {

//   // Successfully processes and inserts valid book data into the database
//   it('should insert valid book data into the database when provided with correct JSON format', async () => {
//     const mockBooks:Book[] = [

//         testBook

//     ];
//     const json = { removePreviousData: false, books: mockBooks };

//     prismaMock.knihy.upsert.mockResolvedValue(testBook as Required<Book>  )
//     const response = await POST_BOOKS(json);
//     expect(prismaMock.knihy.upsert).toHaveBeenCalledTimes(1);
//     expect(response.status).toBe(200);
//     expect(response.json()).resolves.toEqual(
//       expect.objectContaining({
//         success: true,
//         message: expect.stringContaining("Data successfully inserted or updated!"),
//       })
//     );
//   });

//   // Handles empty or null book array gracefully
//   it('should return a 400 error when books array is empty or null', async () => {
//     const jsonWithEmptyBooks = { removePreviousData: false, books: [] };
//     const jsonWithNullBooks = { removePreviousData: false, books: null };

//     const responseEmpty = await POST_BOOKS(jsonWithEmptyBooks);
//     const responseNull = await POST_BOOKS(jsonWithNullBooks);

//     expect(responseEmpty.status).toBe(400);
//     expect(responseEmpty.json()).resolves.toEqual(
//       expect.objectContaining({
//         success: false,
//         error: "Špatný formát, očekával jsem tabulku knížek.",
//       })
//     );

//     expect(responseNull.status).toBe(400);
//     expect(responseNull.json()).resolves.toEqual(
//       expect.objectContaining({
//         success: false,
//         error: "Špatný formát, očekával jsem tabulku knížek.",
//       })
//     );
//   });
// });

//    // const mockPrisma = {
//     //   knihy: {
//     //     upsert: jest.fn(),
//     //     count: jest.fn().mockResolvedValue(1),
//     //   },
//     // };